#!/usr/bin/env python
# coding: utf-8
"""	analyze-x86.py
	Copyright (C) 2010  Aleksey Frolov <atommixz@gmail.com>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from sys import argv
from subprocess import Popen, PIPE
from cStringIO import StringIO

set486 = set('bswap cmpxchg invd invlpg wbinvd xadd'.split())

set586 = set('cmpxchg8b rdmsr rdtsc wrmsr rsm rdpmc'.split())

set686 = set('cmova cmovae cmovb cmovbe cmovc cmove cmovg cmovge cmovl \
cmovle cmovna cmovnae cmovnb cmovnbe cmovnc cmovne cmovng cmovnge \
cmovnl cmovnle cmovno cmovnp cmovns cmovnz cmovo cmovp cmovpe cmovpo \
cmovs cmovz sysenter sysexit ud2 fcmovb fcmovbe fcmove fcmovnb \
fcmovnbe fcmovne fcmovnu fcmovu fcomi fcomip fucomi fucomip'.split())

setmmx = set('emms movd movq packssdw packsswb packuswb paddb paddd paddsb \
paddsw paddusb paddusw paddw pand pandn pcmpeqb pcmpeqd pcmpeqw \
pcmpgtb pcmpgtd pcmpgtw pmaddwd pmulhw pmullw por pslld psllq psllw \
psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsw psubusb \
psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq \
punpcklwd pxor'.split())

setsse = set('addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless \
cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss \
cmpordps cmpordss cmpps cmpss cmpunordps cmpunordss comiss cvtpi2ps \
cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr \
maskmovq maxps maxss minps minss movaps movhlps movhps movlhps movlps \
movmskps movntps movntq movss movups mulps mulss orps pavgb pavgw \
pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw prefetchnta \
prefetcht0 prefetcht1 prefetcht2 psadbw pshufw rcpps rcpss rsqrtps \
rsqrtss sfence shufps sqrtps sqrtss stmxcsr subps subss ucomiss \
unpckhps unpcklps xorps'.split())

setsse2 = set('addpd addsd andnpd andpd cmppd cmpsd comisd cvtdq2pd \
cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd \
cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2dq cvttpd2pi cvttps2dq \
cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd \
movmskpd movsd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd \
subsd ucomisd unpckhpd unpcklpd xorpd movdq2q movdqa movdqu movq2dq \
paddq psubq pmuludq pshufhw pshuflw pshufd pslldq psrldq punpckhqdq \
punpcklqdq'.split())

setsse3 = set('addsubpd addsubps fisttp fisttpl fisttpll haddpd haddps \
hsubpd hsubps lddqu monitor movddup movshdup movsldup mwait'.split())

setsse41 = set('mpsadbw phminposuw pmulld pmuldq dpps dppd blendps blendpd \
blendvps blendvpd pblendvb pblendw pminsb pmaxsb pminuw pmaxuw pminud \
pmaxud pminsd pmaxsd roundps roundss roundpd roundsd insertps pinsrb \
pinsrd pinsrq extractps pextrb pextrw pextrd pextrq pmovsxbw pmovzxbw \
pmovsxbd pmovzxbd pmovsxbq pmovzxbq pmovsxwd pmovzxwd pmovsxwq \
pmovzxwq pmovsxdq pmovzxdq ptest pcmpeqq packusdw movntdqa'.split())

setsse42 = set('crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq \
popcnt'.split())

setsse4a = set('lzcnt popcnt extrq insertq movntsd movntss'.split())

setssse3 = set('psignw psignd psignb pshufb pmulhrsw pmaddubsw phsubw \
phsubsw phsubd phaddw phaddsw phaddd palignr pabsw pabsd pabsb'.split())

set3dnow = set('femms pavgusb pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt \
pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub \
pfsubr pi2fd pmulhrw prefetch prefetchw'.split())

set3dnowext = set('pf2iw pfnacc pfpnacc pi2fw pswapd pfrsqrtv \
pfrcpv'.split())

i486=i586=i686=immx=isse=isse2=isse3=issse3=isse41=isse42=isse4a= \
i3dnow=i3dnowext=cpuid=nop=call=count=0

p1 = Popen(['objdump', '-d', argv[1]], stdout=PIPE)
p2 = Popen(['cut', '-f3'], stdin=p1.stdout, stdout=PIPE)
p3 = Popen(['cut', '-d ', '-f1'],stdin=p2.stdout, stdout=PIPE)
cStr = p3.communicate()[0]
cStr = cStr.split()

for i in xrange(0,len(cStr)):
	if ord(cStr[i][0]) in range(ord('a'), ord('z') + 1): count += 1
	if cStr[i] == 'cpuid':	cpuid	+= 1
	if cStr[i] == 'nop':	nop		+= 1
	if cStr[i] == 'call':	call	+= 1

	if cStr[i] in set486:	i486	+= 1
	if cStr[i] in set586:	i586	+= 1
	if cStr[i] in set686:	i686	+= 1
	if cStr[i] in setmmx:	immx	+= 1
	if cStr[i] in setsse:	isse	+= 1
	if cStr[i] in setsse2:	isse2	+= 1
	if cStr[i] in setsse3:	isse3	+= 1
	if cStr[i] in setsse41:	isse41	+= 1
	if cStr[i] in setsse42:	isse42	+= 1
	if cStr[i] in setsse4a:	isse4a	+= 1
	if cStr[i] in setssse3:	issse3	+= 1
	if cStr[i] in set3dnow:	i3dnow	+= 1
	if cStr[i] in set3dnowext: i3dnowext += 1

print ('cpuid:\t%i\tnop: %i\tcall: %i\n' % (
	cpuid, nop,	call))
if i486:	print('i486:\t'),	i486
if i586:	print('i586:\t'),	i586
if i686:	print('i686:\t'),	i686
if immx:	print('mmx:\t'),		immx
if isse:	print('sse:\t'),		isse
if isse2:	print('sse2:\t'),	isse2
if isse3:	print('sse3:\t'),	isse3
if isse41:	print('sse4.1:\t'),	isse41
if isse42:	print('sse4.2:\t'),	isse42
if isse4a:	print('sse4a:\t'),	isse4a
if issse3:	print('ssse3:\t'),	issse3
if i3dnow:	print('3dnow!:\t'),	i3dnow
if i3dnowext:print('3dnow+:\t'),	i3dnowext
print('\ncount:\t%i' % count)

