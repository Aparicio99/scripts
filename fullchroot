#!/bin/sh

# Script to facilitate the use of chroot to Gentoo systems by
# mouting and umnounting the virtual filesystems automatically
# inside the chroot

CHROOT="$1"

if [ -z "$CHROOT" ]; then
	echo "Usage: fullchroot <mountpoint>"
	exit
fi

shift

function is_another_chroot_is_running() {
	# Yes, this is has a race-condition, but who cares in this case...
	for pid in $(pidof bash); do
		path=$(ls -ld "/proc/${pid}/root" | awk '{print $NF}')
		[ "$path" = "$CHROOT" ] && return 0
	done
	return 1
}

function mount_exists() {
	mount | grep "${CHROOT}${1}" >/dev/null
}

if ! mount_exists /proc; then
	mount -t proc /proc "${CHROOT}/proc"
fi

if ! mount_exists /sys; then
	mount --rbind /sys "${CHROOT}/sys"
	mount --make-rslave "${CHROOT}/sys"
fi

if ! mount_exists /dev; then
	mount --rbind /dev "${CHROOT}/dev"
	mount --make-rslave "${CHROOT}/dev"
fi

if ! mount_exists /usr/portage; then
	mount -o bind /usr/portage "${CHROOT}/usr/portage"
fi

if ! mount_exists /usr/distfiles; then
	mount -o bind /usr/distfiles "${CHROOT}/usr/distfiles"
fi

cp -f /etc/resolv.conf "${CHROOT}/etc/resolv.conf"

### Actual chroot call

export PS1="(chroot) \w $ "
chroot "${CHROOT}" /bin/bash "$@"

### Umount stuff if allowed

if [ -z "${KEEP_MOUNTS}" ] && ! is_another_chroot_is_running ; then
	umount -l "${CHROOT}"/dev{/shm,/pts,}
	umount -l "${CHROOT}"{/sys,/proc}
	umount -f "${CHROOT}/usr/"{portage,distfiles}
fi
