#!/usr/bin/gawk -f
BEGIN {
	now = systime()
	out = "/root/ap_scan.out"
	stats = "/root/ap_scan.stats"
	sort = "sort -nk3"
	new = 0
	c0 = "\033[0m"
	c1 = "\033[0;32m" # green
	c2 = "\033[0;33m" # yellow
	c3 = "\033[0;31m" # red
	c4 = "\033[0;34m" # blue
	bold = "\033[0;1m"

	while (getline < out) {
		days = int((now - $5) / 86400)
		hours = int((now - $5 - days * 86400) / 3600)
		mins = int((now - $5 - days * 86400 - hours * 3600) / 60 )

		name[$1] = $2
		channel[$1] = $3
		qual[$1] = $4
		last[$1] = $5

		if (days < 1) {
			if (hours < 1) {
				if (mins < 1)       state[$1] = c1 "< 1 min"
				else if (mins < 5)  state[$1] = c1 "< 5 min"
				else if (mins < 10) state[$1] = c1 "< 10 min"
				else if (mins < 30) state[$1] = c1 "< 30 min"
				else                state[$1] = c1 "< 1 hour"
			}
			else if (hours < 2)  state[$1] = c2 "< 2 hours"
			else if (hours < 5)  state[$1] = c2 "< 5 hours"
			else if (hours < 12) state[$1] = c2 "< 12 hours"
			else                 state[$1] = c2 "< 1 day"
		}
		else if (days < 2)  state[$1] = c3 "< 2 days"
		else if (days < 3)  state[$1] = c3 "< 3 days"
		else if (days < 7)  state[$1] = c3 "< 1 week"
		else if (days < 14) state[$1] = c3 "< 2 weeks"
		else if (days < 30) state[$1] = c3 "< 1 month"
		else                state[$1] = c4 "> 1 month"

		state[$1] = state[$1] c0
	}
	ARGC = 1
}

/Address:/ {
	ap = $5
	last[ap] = now
	if (state[ap] == "")
		state[ap] = bold "###### NEW ######" c0
	else
		state[ap] = bold "*** Now ***" c0
	seen[ap] = 1
	scanned++
}

/Channel:/ {
	gsub(":", " ")
	channel[ap] = $2
}

/\(Channel / {
	gsub(")", " ")
	channel[ap] = $4
}

/Quality/ {
	gsub("=", " ")
	if (qual[ap] == "" || qual[ap] < $2)
		qual[ap] = $2
}

/ESSID:/ {
	gsub("\"", " ")
	if ($2 == "")
		name[ap] = "[noname]"
	else
		name[ap] = $2
}

END {
	for(ap in qual) {
		printf "%s  %-25s  %2d  %2d  %d  %s\n", ap, name[ap], channel[ap], qual[ap], last[ap], state[ap] |& sort
		if (state[ap] ~ /NEW/)
			new++
		if (now - last[ap] < 24 * 3600) {
			num[channel[ap]]++
			qual_sum[channel[ap]] += qual[ap]
		}
	}
	close(sort, "to")

	while (sort |& getline) {

		if(!(ARGV[1] == "now") || seen[$1])
			print
		print > out
	}

	print "Total:", length(qual), " Scanned:", scanned, " New:", new


	for(i = 1; i <= 13; i++)
		printf "%2d %2d %3d\n", i, num[i], qual_sum[i] > stats

	if (ARGV[1] == "plot") {
		if (ARGV[2] == "sum")
			cmd = "plot '" stats  "' using 1:3 with boxes title 'Sum Quality'"
		else if (ARGV[2] == "avg")
			cmd = "plot '" stats "' using 1:($3/$2) with boxes title 'Avg Quality'"
		else
			cmd = "plot '" stats "' using 1:2 with boxes title '#APs'"

		print cmd | "gnuplot -persist"
	}

}
