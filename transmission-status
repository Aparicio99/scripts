#!/usr/bin/python3

import sys, http.client, re, json

STOPPED     = 0
DOWNLOADING = 4
UPLOADING   = 6

def transmission_post(conn, headers={}):

	params = "{\"arguments\":{\"fields\":[\"error\",\"errorString\",\"eta\",\"id\",\"isFinished\",\"leftUntilDone\",\"name\",\"peersGettingFromUs\",\"peersSendingToUs\",\"rateDownload\",\"rateUpload\",\"sizeWhenDone\",\"status\",\"uploadRatio\"]},\"method\":\"torrent-get\",\"tag\":4}"

	conn.request("POST", "/transmission/rpc/", params, headers)
	response = conn.getresponse()

	return response.read().decode()

def transmission_list(host):

	conn = http.client.HTTPConnection(host + ':9091')

	data = transmission_post(conn)

	matches = re.search('<code>X-Transmission-Session-Id: (.+)</code>', data)
	session_id = matches.group(1)
	headers = {"X-Transmission-Session-Id": session_id}

	data = transmission_post(conn, headers)

	parsed_data = json.loads(data)
	tag = parsed_data['tag']
	arguments = parsed_data['arguments']
	result = parsed_data['result']
	torrents = arguments['torrents']

	torrents_by_id = {}
	for t in torrents:
		torrents_by_id[t['id']] = t

	return torrents_by_id

def bandwidth(bps):
	if bps < 1024:
		return str(bps) + "B"
	elif bps < 1048576:
		return str(round(bps/1024, 1)) + "K"
	else:
		return str(round(bps/1048576, 1)) + "M"

def time_left(s):
	days = int(s/86400)
	s -= days * 86400
	hours = int(s / 3600)
	s -= hours * 3600
	mins = int(s / 60)
	secs = s - mins * 60

	if days > 0:
		return "%dd %dh %02dm %02ds" % (days, hours, mins, secs)
	elif hours > 0:
		return "%dh %02dm %02ds" % (hours, mins, secs)
	elif mins > 0:
		return "%02dm %02ds" % (mins, secs)
	else:
		return "%ds" % secs

def print_torrent(t):
	id = t
	name = t['name']
	upload = bandwidth(t['rateUpload'])
	download = bandwidth(t['rateDownload'])
	if int(t['sizeWhenDone']) > 0:
		progress = round(100 - (int(t['leftUntilDone']) / int(t['sizeWhenDone']) * 100))
	else:
		progress = 0

	if t['eta'] != -1:
		eta = "${color}ETA ${color3}" + time_left(t['eta'])
	else:
		eta = ""

	print('${color}' + name)
	print('${color3}' + str(progress) + "%", "${color}Up${color3}", upload, "${color}Down${color3}", download, eta)
	print()


if __name__ == "__main__":

	if len(sys.argv) != 2:
		print("Usage: transmission-status <host>")
		exit()
	else:
		host = sys.argv[1]

	torrents = transmission_list(host)

	for id in torrents:
		t = torrents[id]
		if t['status'] != 0:
			print_torrent(t)
